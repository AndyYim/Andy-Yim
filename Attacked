import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.util.Scanner;
import java.util.*;
import java.io.File;
import java.io.IOException;
import java.io.FileWriter;
import java.io.BufferedWriter;
/**
 * The class Attacked is a component of the replica of the Exploding Kittens game. 
 * @prereq      none
 * @param      oneChoice, twoChoice, threeChoice, fourChoice, size, EKC, player1, player2, player3, player4, stat
 * @return       none             
 * @post        The program prints out a window containing a simulation of the game "Exploding Kittens" and inputs into and outputs files representing components of "Exploding Kittens".
 * Andy Yim and Tommy Yim 
 * 
 */
public class Attacked extends Game
{
    // instance variables - replace the example below with your own
    /**
     * Constructor for objects of class Attacked
     */
    public Attacked()
    {
        // initialise instance variables
        super();
    }//ends Attacked constructor

    public void firstPlayerAttacked(String twoChoice, String threeChoice, String fourChoice, int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, ArrayList<String> player3, ArrayList<String> player4, int stat) throws IOException
    {
        Tricat tri = new Tricat();
        Favored fav = new Favored();
        Scanner scan = new Scanner(System.in);
        String h = "C:\\Users\\1049467\\Desktop\\EKHelp.txt";
        String p1 = "C:\\Users\\1049467\\Desktop\\EKHand1.txt";
        String p1STF = "C:\\Users\\1049467\\Desktop\\EKHand1STF.txt";
        String d = "C:\\Users\\1049467\\Desktop\\EKDiscard.txt";
        int pSteal;
        int numSteal;
        int numFavor = 0;
        int nopeChoice = 0;
        String strSteal;
        int n = 0;
        do
        {
            if (twoChoice.equals("Favor") || threeChoice.equals("Favor") || fourChoice.equals("Favor"))
            {
                fav.firstPlayerFavored(twoChoice, threeChoice, fourChoice, size, EKC, player1, player2, player3, player4, stat);
            }//if p2 or p3 or p4 choice is Favor and wants a favor from p1, then go to p1 favored method
            try
            {
                PrintWriter writer = new PrintWriter(p1);
                writer.print("");
                writer.close();
                FileWriter fw = new FileWriter(p1, true);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.newLine();
                bw.write("[Start] Hand 1: " + player1);
                bw.close();
            }//write p1's hand into p1 file
            catch(IOException e)
            {
                System.out.println("Error " + e);
            }//checks and displays error if there is an error
            System.out.println("Card Count: " + (EKC.size()));
            System.out.println("Player 1 - Play or Draw (d1) or h (for help) or ragequit: ");
            oneChoice = scan.nextLine();
            if (oneChoice.equals("ragequit"))
            {
                System.exit(0);
            }//exit system if user types "ragequit"
            if (oneChoice.equals("h"))
            {
                System.out.println("Check your desktop for a file called EKHelp.txt.");
                System.out.println("Delete all files when everyone is finished or when the game is discontinued.");
                try
                {
                    PrintWriter writer = new PrintWriter(h);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(h, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write("(*2) 2 cats = user chooses any player and takes a random card of user's choice");
                    bw.newLine();
                    bw.write("(*3) 3 cats = user chooses any player and types any card of their choice");
                    bw.newLine();
                    bw.write("(*3) (cont). if the opposing player has the card, then the user takes the card");
                    bw.newLine();
                    bw.write("(*3) (cont). else the opposing player doesn't have the card, then the user does not take any card");
                    bw.newLine();
                    bw.write("Skip - skips the player's turn who used Skip");
                    bw.newLine();
                    bw.write("Attack - skips the player's turn who used Attack and gives the next player 2 more turns");
                    bw.newLine();
                    bw.write("Shuffle - shuffles the deck");
                    bw.newLine();
                    bw.write("Favor - ask any player to give the player who used favor any card of the recipient's choice");
                    bw.newLine();
                    bw.write("Hairy Potato Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Cattermelon - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Rainbow-Ralphing Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Beard Cat - a cat (*2) (*3) ");
                    bw.newLine();
                    bw.write("Taco Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("See the Future - sees the top 3 cards of the deck");
                    bw.newLine();
                    bw.write("Nope - denies the action of any cards with special effects (including the 2 and 3 cat effects)");
                    bw.newLine();
                    bw.write("Exploding Kittens - a deadly kitten (cannot use Nope on this card) that explodes unless you have a defuse");
                    bw.newLine();
                    bw.close();
                }//writes help instructions into file if player needs help ("h")
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }//checks and displays error if there is an error
                System.out.println();
            }//help instructions
            if (!oneChoice.equals("d1") && player1.contains(oneChoice))
            {
                player1.remove(oneChoice);
                discard.add(n, oneChoice);
                try
                {
                    PrintWriter writer = new PrintWriter(d);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(d, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("Discard Pile: " + discard);
                    bw.close();
                }//writes discard pile into discard file
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }//checks and displays error if there is an error
                System.out.println();
                n++;
                if (player2.contains("Nope") || player3.contains("Nope") || player4.contains("Nope"))
                {
                    if (!oneChoice.equals("Favor") && !oneChoice.equals("Hairy Potato Cat") && !oneChoice.equals("Beard Cat") && !oneChoice.equals("Taco Cat") && !oneChoice.equals("Rainbow-Ralphing Cat") && !oneChoice.equals("Cattermelon"))
                    {
                        System.out.println("Does anyone want to use their Nope on Player 1's " + oneChoice + "?");
                        System.out.println("(Enter your player # for yes or enter 0 for no)");
                        nopeChoice = scan.nextInt();
                        System.out.println();
                        if (nopeChoice != 0)
                        {
            VisualNP np = new VisualNP();
            np.main();
                            switch (nopeChoice)
                            {
                                case 2:
                                if (player2.contains("Nope"))
                                {
                                    player2.remove("Nope");
                                    discard.add("Nope");
                                }//remove p2’s nope after they use it and add to discard pile
                                break;
                                case 3:
                                if (player3.contains("Nope"))
                                {
                                    player3.remove("Nope");
                                    discard.add("Nope");
                                }//remove p3’s nope after they use it and add to discard pile
                                break;
                                case 4:
                                if (player4.contains("Nope"))
                                {
                                    player4.remove("Nope");
                                    discard.add("Nope");
                                }//remove p4’s nope after they use it and add to discard pile
                                break;
                            }//ends nopeChoice switch statement
                            nopeChoice = 0;
                            firstPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }//ends if statement for nopeChoice != 0
                    }//ends if statement for nope outcomes
                    else
                    {
                        if (oneChoice.equals("Favor") || oneChoice.equals("Hairy Potato Cat") || oneChoice.equals("Beard Cat") || oneChoice.equals("Taco Cat") || oneChoice.equals("Rainbow-Ralphing Cat") || oneChoice.equals("Cattermelon"))
                        {
                            if (oneChoice.equals("Favor"))
                            {
                                System.out.println("Enter the player who you want to use favor on: ");
                                numFavor = scan.nextInt();
                            }
                            System.out.println("Does anyone want to use their Nope on Player 1's " + oneChoice + "?");
                            System.out.println("(Enter your player # for yes or enter 0 for no)");
                            nopeChoice = scan.nextInt();
                            System.out.println();
                            if (nopeChoice != 0)
                            { VisualNP np = new VisualNP();
            np.main();
                                switch (nopeChoice)
                                {
                                    case 2:
                                    if (player2.contains("Nope"))
                                    {
                                        player2.remove("Nope");
                                        discard.add("Nope");
                                        if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                        {
                                            player1.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                            {
                                                player1.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                        {
                                            player1.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                            {
                                                player1.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                        {
                                            player1.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                            {
                                                player1.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player1.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player1.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                        {
                                            player1.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                            {
                                                player1.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }//remove p2’s nope after they use it and add to discard pile
                                    break;
                                    case 3:
                                    if (player3.contains("Nope"))
                                    {
                                        player3.remove("Nope");
                                        discard.add("Nope");
                                        if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                        {
                                            player1.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                            {
                                                player1.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                        {
                                            player1.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                            {
                                                player1.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                        {
                                            player1.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                            {
                                                player1.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player1.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player1.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                        {
                                            player1.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                            {
                                                player1.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }//remove p3’s nope after they use it and add to discard pile
                                    break;
                                    case 4:
                                    if (player4.contains("Nope"))
                                    {
                                        player4.remove("Nope");
                                        discard.add("Nope");
                                        if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                        {
                                            player1.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (oneChoice.equals("Hairy Potato Cat") && player1.contains("Hairy Potato Cat"))
                                            {
                                                player1.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                        {
                                            player1.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (oneChoice.equals("Beard Cat") && player1.contains("Beard Cat"))
                                            {
                                                player1.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                        {
                                            player1.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (oneChoice.equals("Taco Cat") && player1.contains("Taco Cat"))
                                            {
                                                player1.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player1.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (oneChoice.equals("Rainbow-Ralphing Cat") && player1.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player1.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                        {
                                            player1.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (oneChoice.equals("Cattermelon") && player1.contains("Cattermelon"))
                                            {
                                                player1.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }//remove p4’s nope after they use it and add to discard pile
                                    break;
                                }
                                nopeChoice = 0;
                                firstPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }//ends if statement for nopeChoice != 0
                            if (nopeChoice == 0)
                            {
                                if (oneChoice.equals("Favor"))
                                { VisualFV f = new VisualFV();
                                  f.main();
                                    switch (numFavor)
                                    {
                                        case 2:
                                        if (!player2.contains("Exploding Kittens"))
                                        {
                                            secondPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                                        }//goes to p2 method if p1 wants a favor from p2
                                        break;
                                        case 3:
                                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                                        {  
                                            thirdPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                                        }//goes to p3 method if p1 wants a favor from p3
                                        break;
                                        case 4:
                                        if (size == 4 && !player4.contains("Exploding Kittens"))
                                        {
                                            fourthPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                                        }//goes to p4 method if p1 wants a favor from p4
                                        break;
                                    }//ends numFavor switch statement for execution of favor effect
                                }
                                if (oneChoice.equals("Hairy Potato Cat"))
                                {
                                    if (!player1.contains("Hairy Potato Cat"))
                                    {
                                        player1.add("Hairy Potato Cat");
                                        discard.remove("Hairy Potato Cat");
                                    }
                                    else if (player1.contains("Hairy Potato Cat"))
                                    { VisualHPC hpc = new VisualHPC();
                                       hpc.main();
                                        player1.remove("Hairy Potato Cat");
                                        discard.add("Hairy Potato Cat");
                                        if (!player1.contains("Hairy Potato Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player1.contains("Hairy Potato Cat"))
                                        {
                                            player1.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }//when choice is Hairy Potato Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                                if (oneChoice.equals("Cattermelon"))
                                {
                                    if (!player1.contains("Cattermelon"))
                                    {
                                        player1.add("Cattermelon");
                                        discard.remove("Cattermelon");
                                    }
                                    else if (player1.contains("Cattermelon"))
                                    { VisualCM cm = new VisualCM();
                                       cm.main();
                                        player1.remove("Cattermelon");
                                        discard.add("Cattermelon");
                                        if (!player1.contains("Cattermelon"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player1.contains("Cattermelon"))
                                        {
                                            player1.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }//when choice is Cattermelon, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                                if (oneChoice.equals("Rainbow-Ralphing Cat"))
                                {
                                    if (!player1.contains("Rainbow-Ralphing Cat"))
                                    {
                                        player1.add("Rainbow-Ralphing Cat");
                                        discard.remove("Rainbow-Ralphing Cat");
                                    }
                                    else if (player1.contains("Rainbow-Ralphing Cat"))
                                    { VisualRRC r = new VisualRRC();
                r.main();
                                        player1.remove("Rainbow-Ralphing Cat");
                                        discard.add("Rainbow-Ralphing Cat");
                                        if (!player1.contains("Rainbow-Ralphing Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player1.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player1.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }//when choice is Rainbow-Ralphing Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                                if (oneChoice.equals("Beard Cat"))
                                {
                                    if (!player1.contains("Beard Cat"))
                                    {
                                        player1.add("Beard Cat");
                                        discard.remove("Beard Cat");
                                    }
                                    else if (player1.contains("Beard Cat"))
                                    { VisualBC bc = new VisualBC();
                                       bc.main();
                                        player1.remove("Beard Cat");
                                        discard.add("Beard Cat");
                                        if (!player1.contains("Beard Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player1.contains("Beard Cat"))
                                        {
                                            player1.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }//when choice is Beard Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                                if (oneChoice.equals("Taco Cat"))
                                {
                                    if (!player1.contains("Taco Cat"))
                                    {
                                        player1.add("Taco Cat");
                                        discard.remove("Taco Cat");
                                    }
                                    else if (player1.contains("Taco Cat"))
                                    { VisualTC tc = new VisualTC();
                                       tc.main();
                                        player1.remove("Taco Cat");
                                        discard.add("Taco Cat");
                                        if (!player1.contains("Taco Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player1.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player1.contains("Taco Cat"))
                                        {
                                            player1.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }//when choice is Taco Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                                firstPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }//ends if statement for nopeChoice == 0 and for execution of favor effect
                            System.out.println();
                        }//ends else statement for when oneChoice is favor
                    }//ends if statement for when at least one other player has a nope card
                }//asks if p2, p3, or p4 wants to use nope when p1 uses effect
                if (oneChoice.equals("Favor") && nopeChoice == 0)
                { VisualFV f = new VisualFV();
                    f.main();
                    System.out.println("Enter the player who you want to use favor on: ");
                    numFavor = scan.nextInt();
                    switch (numFavor)
                    {
                        case 2:
                        if (!player2.contains("Exploding Kittens"))
                        {
                            secondPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                        }//go to secondPlayer if p1 wants a favor from p2
                        break;
                        case 3:
                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                        {  
                            thirdPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                        }//go to thirdPlayer if p1 wants a favor from p3
                        break;
                        case 4:
                        if (size == 4 && !player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, 01);
                        }//go to fourthPlayer if p1 wants a favor from p4
                        break;
                    }
                }// if choice is "Favor", then ask for a favor from any player
                if (oneChoice.equals("Nope"))
                {
                    System.out.println("Nope can only be used to counter another card!");
                    firstPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                }//if choice is "Nope", deny them
                if (oneChoice.equals("See the Future") && nopeChoice == 0)
                { VisualSTF stf = new VisualSTF();
                    stf.main();
                    System.out.println("Check your STF file to know the first three cards.");
                    System.out.println();
                    try
                    {
                        PrintWriter writer = new PrintWriter(p1STF);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p1STF, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("First Three Cards in the Deck: ");
                        bw.newLine();
                        for (int i = 0; i < 3; i++)
                        {
                            bw.write(EKC.get(i));
                            bw.newLine();
                        }//write the first three cards in the deck into p1’s hand file
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }//checks and displays error if there is an error
                }//if choice is "See the Future", then see first three cards
                if (oneChoice.equals("Skip") && nopeChoice == 0)
                { VisualSKP skip = new VisualSKP();
                   skip.main();
                    if (!player2.contains("Exploding Kittens"))
                    {
                        secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to secondPlayer
                    else if (size == 3 || size == 4 && player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to thirdPlayer if secondPlayer is dead
                    else if (size == 4 && player2.contains("Exploding Kittens") && player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                    {
                        fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to fourthPlayer if secondPlayer and thirdPlayer is dead
                }//if choice is "Skip", then skip p1's turn and move on to next player
                if (oneChoice.equals("Attack") && nopeChoice == 0)
                { VisualA a = new VisualA();
                    a.main();
                    if (!player2.contains("Exploding Kittens"))
                    {
                        secondPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to secondPlayer & secondPlayer is "Attacked"
                    else if (size == 3 || size == 4 && player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to thirdPlayer & thirdPlayer is "Attacked"
                    else if (size == 4 && player2.contains("Exploding Kittens") && player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                    {
                        fourthPlayer(oneChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//goes to fourthPlayer & fourthPlayer is "Attacked"
                }//if choice is "Attack", then go to next player & next player has 2 turns
                if (oneChoice.equals("Shuffle") && nopeChoice == 0)
                { VisualNP np = new VisualNP();
                   np.main();
                    player1Shuffle();
                    System.out.println("The Exploding Kittens deck has been shuffled.");
                    System.out.println();
                }//if choice is "Shuffle", then shuffle deck
                if (oneChoice.equals("Hairy Potato Cat") && nopeChoice == 0)
                { 
                    if (!player1.contains("Hairy Potato Cat"))
                    {
                        player1.add("Hairy Potato Cat");
                        discard.remove("Hairy Potato Cat");
                    }//gives Hairy Potato Cat back to user if they only have and use 1 Hairy Potato Cat
                    else if (player1.contains("Hairy Potato Cat"))
                    {
        VisualHPC hpc = new VisualHPC();
        hpc.main();
                        player1.remove("Hairy Potato Cat");
                        discard.add("Hairy Potato Cat");
                        if (!player1.contains("Hairy Potato Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }//ends switch statement for when p1 has and uses 2 Hairy Potato Cat
                        }//checks if p1 has any more than 2 Hairy Potato Cat
                        else if (player1.contains("Hairy Potato Cat"))
                        {
                            player1.remove("Hairy Potato Cat");
                            discard.add("Hairy Potato Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }//if p1 has and uses 3 Hairy Potato Cat, then go to threeCatEffect method
                    }//checks if p1 has 2 Hairy Potato Cat
                }//when choice is Hairy Potato Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                if (oneChoice.equals("Cattermelon") && nopeChoice == 0)
                { 
                    if (!player1.contains("Cattermelon"))
                    {
                        player1.add("Cattermelon");
                        discard.remove("Cattermelon");
                    }//gives Cattermelon back to user if they only have and use 1 Cattermelon
                    else if (player1.contains("Cattermelon"))
                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                        player1.remove("Cattermelon");
                        discard.add("Cattermelon");
                        if (!player1.contains("Cattermelon"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }//ends switch statement for when p1 has and uses 2 Cattermelon
                        }//checks if p1 has any more than 2 Cattermelon
                        else if (player1.contains("Cattermelon"))
                        {
                            player1.remove("Cattermelon");
                            discard.add("Cattermelon");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }//if p1 has and uses 3 Cattermelon, then go to threeCatEffect method
                    }//checks if p1 has 2 Cattermelon
                }//when choice is Cattermelon, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                if (oneChoice.equals("Rainbow-Ralphing Cat") && nopeChoice == 0)
                { 
                    if (!player1.contains("Rainbow-Ralphing Cat"))
                    {
                        player1.add("Rainbow-Ralphing Cat");
                        discard.remove("Rainbow-Ralphing Cat");
                    }//gives Rainbow-Ralphing Cat back to p1 if they only have and use 1 Hairy Potato Cat
                    else if (player1.contains("Rainbow-Ralphing Cat"))
                    {
VisualRRC r = new VisualRRC();
                r.main();
                        player1.remove("Rainbow-Ralphing Cat");
                        discard.add("Rainbow-Ralphing Cat");
                        if (!player1.contains("Rainbow-Ralphing Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }//ends switch statement for when p1 has and uses 2 Rainbow-Ralphing Cat
                        }//checks if p1 has any more than 2 Rainbow-Ralphing Cat
                        else if (player1.contains("Rainbow-Ralphing Cat"))
                        {
                            player1.remove("Rainbow-Ralphing Cat");
                            discard.add("Rainbow-Ralphing Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }//if p1 has and uses 3 Rainbow-Ralphing Cat, then go to threeCatEffect method
                    }//checks if p1 has 2 Rainbow-Ralphing Cat
                }//when choice is Rainbow Ralphing-Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                if (oneChoice.equals("Beard Cat") && nopeChoice == 0)
                { 
                    if (!player1.contains("Beard Cat"))
                    {
                        player1.add("Beard Cat");
                        discard.remove("Beard Cat");
                    }//gives Beard Cat back to p1 if they only have and use 1 Beard Cat
                    else if (player1.contains("Beard Cat"))
                    {
VisualBC bc = new VisualBC();
        bc.main();
                        player1.remove("Beard Cat");
                        discard.add("Beard Cat");
                        if (!player1.contains("Beard Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }//ends switch statement for when p1 has and uses 2 Beard Cat
                        }//checks if p1 has any more than 2 Beard Cat
                        else if (player1.contains("Beard Cat"))
                        {
                            player1.remove("Beard Cat");
                            discard.add("Beard Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }//if p1 has and uses 3 Beard Cat, then go to threeCatEffect method
                    }//checks if p1 has 2 Beard Cat
                }//when choice is Beard Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
                if (oneChoice.equals("Taco Cat") && nopeChoice == 0)
                { 
                    if (!player1.contains("Taco Cat"))
                    {
                        player1.add("Taco Cat");
                        discard.remove("Taco Cat");
                    }//gives Taco Cat back to p1 if they only have and use 1 Taco Cat
                    else if (player1.contains("Taco Cat"))
                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                        player1.remove("Taco Cat");
                        discard.add("Taco Cat");
                        if (!player1.contains("Taco Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player1.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }//ends switch statement for when p1 has and uses 2 Taco Cat
                        }//checks if p1 has any more than 2 Taco Cat
                        else if (player1.contains("Taco Cat"))
                        {
                            player1.remove("Taco Cat");
                            discard.add("Taco Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(01,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }//if p1 has and uses 3 Taco Cat, then go to threeCatEffect method
                    }//checks if p1 has 2 Taco Cat
                }//when choice is Taco Cat, if only 1 -> do nothing, if 2 -> steal random card of choosing, if 3 -> steal any card
            }//ends if statement containing the effects
        }while (!oneChoice.equals("d1"));
        if (oneChoice.equals("d1"))
        {
            player1.add(EKC.get(0));
            EKC.remove(0);
            System.out.println();
            if (player1.contains("Exploding Kittens"))
            {
                System.out.println("Player 1 - You got an Exploding Kitten. Defuse y/n?: ");
                defuseChoice = scan.nextLine();
                if (player1.contains("Defuse") && defuseChoice.equals("y"))
                {
        VisualDF df = new VisualDF();
            df.main();
                    player1.remove("Defuse");
                    player1.remove("Exploding Kittens");
                    try
                    {
                        PrintWriter writer = new PrintWriter(p1);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p1, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("[End] Hand 1: " + player1);
                        bw.close();
                    }//writes p1's hand into p1 hand file
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }//checks and displays error if there is an error
                    System.out.println("Where do you want to place the Exploding Kitten? (0-" + ((EKC.size())-1) + ")(0 is the top of the deck. " + ((EKC.size())-1) + " is the bottom of the deck.)(Ex. 1 is on top of the second card. 2 above the third card. Etc.)");
                    cardPos = scan.nextInt();
                    System.out.println();
                    for (int j = cardPos + 1; j < EKC.size(); j++)
                    {
                        EKC.set(j, EKC.get(j));
                    }//shifts the cards at & after where the EK is placed over by one index towards the bottom of the deck
                    EKC.add(cardPos, "Exploding Kittens");
                }//if p1 uses defuse on EK, then they are saved and they can put EK anywhere in deck
                else
                {
VisualEK eks = new VisualEK();
            eks.main();
                    System.out.println("Player 1 has exploded.");
                    System.out.println();
                    End st = new End();
            st.status(size, player1, player2, player3, player4);
                    if (!player2.contains("Exploding Kittens"))
                    {
                        secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//go to secondPlayer
                    else if (player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//go to thirdPlayer
                    else if (player2.contains("Exploding Kittens") && player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                    {
                        fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }//go to fourthPlayer
                }//p1 exploded, checks if others exploded, and goes on to next player
            }//if p1 draws an EK, then they can defuse or they can't defuse
            else
            {
                try
                {
                    PrintWriter writer = new PrintWriter(p1);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(p1, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("[End] Hand 1: " + player1);
                    bw.close();
                }//writes p1's hand into p1 hand file
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }//checks and displays error if there is an error
                firstPlayer("null", "null", "null", size, EKC, player1, player2, player3, player4, stat);
            }//update p1's hand and go to firstPlayer
        }//ends p1's drawing phase
    }//ends p1's attacked turn method and goes to p1’s normal turn
    public void secondPlayerAttacked(String oneChoice, String threeChoice, String fourChoice, int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, ArrayList<String> player3, ArrayList<String> player4, int stat) throws IOException
    {

        Tricat tri = new Tricat(); 
        Favored fav = new Favored();
        Scanner scan = new Scanner(System.in);
        String h = "C:\\Users\\1049467\\Desktop\\EKHelp.txt";
        String p2 = "C:\\Users\\1049467\\Desktop\\EKHand2.txt";
        String p2STF = "C:\\Users\\1049467\\Desktop\\EKHand2STF.txt";
        String d = "C:\\Users\\1049467\\Desktop\\EKDiscard.txt";
        int pSteal;
        int numSteal;
        int numFavor = 0;
        int nopeChoice = 0;
        String strSteal;
        int n = 0;
        do
        {
            if (oneChoice.equals("Favor") || threeChoice.equals("Favor") || fourChoice.equals("Favor"))
            {
                fav.secondPlayerFavored(oneChoice, threeChoice, fourChoice, size, EKC, player1, player2, player3, player4, stat);
            }
            try
            {
                PrintWriter writer = new PrintWriter(p2);
                writer.print("");
                writer.close();
                FileWriter fw = new FileWriter(p2, true);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.newLine();
                bw.write("[Start] Hand 2: " + player2);
                bw.close();
            }
            catch(IOException e)
            {
                System.out.println("Error " + e);
            }
            System.out.println("Card Count: " + (EKC.size()));
            System.out.println("Player 2 - Play or Draw (d2) or h (for help) or ragequit: ");
            twoChoice = scan.nextLine();
            if (twoChoice.equals("ragequit"))
            {
                System.exit(0);
            }
            if (twoChoice.equals("h"))
            {
                System.out.println("Check your desktop for a file called EKHelp.txt.");
                System.out.println("Delete all files when everyone is finished or when the game is discontinued.");
                try
                {
                    PrintWriter writer = new PrintWriter(h);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(h, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write("(*2) 2 cats = user chooses any player and takes a random card of user's choice");
                    bw.newLine();
                    bw.write("(*3) 3 cats = user chooses any player and types any card of their choice");
                    bw.newLine();
                    bw.write("(*3) (cont). if the opposing player has the card, then the user takes the card");
                    bw.newLine();
                    bw.write("(*3) (cont). else the opposing player doesn't have the card, then the user does not take any card");
                    bw.newLine();
                    bw.write("Skip - skips the player's turn who used Skip");
                    bw.newLine();
                    bw.write("Attack - skips the player's turn who used Attack and gives the next player 2 more turns");
                    bw.newLine();
                    bw.write("Shuffle - shuffles the deck");
                    bw.newLine();
                    bw.write("Favor - ask any player to give the player who used favor any card of the recipient's choice");
                    bw.newLine();
                    bw.write("Hairy Potato Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Cattermelon - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Rainbow-Ralphing Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Beard Cat - a cat (*2) (*3) ");
                    bw.newLine();
                    bw.write("Taco Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("See the Future - sees the top 3 cards of the deck");
                    bw.newLine();
                    bw.write("Nope - denies the action of any cards with special effects (including the 2 and 3 cat effects)");
                    bw.newLine();
                    bw.write("Exploding Kittens - a deadly kitten (cannot use Nope on this card) that explodes unless you have a defuse");
                    bw.newLine();
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
            }
            if (!twoChoice.equals("d2") && player2.contains(twoChoice))
            {
                player2.remove(twoChoice);
                discard.add(n, twoChoice);
                try
                {
                    PrintWriter writer = new PrintWriter(d);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(d, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("Discard Pile: " + discard);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
                n++;
                if (player1.contains("Nope") || player3.contains("Nope") || player4.contains("Nope"))
                {
                    if (!twoChoice.equals("Favor") && !twoChoice.equals("Hairy Potato Cat") && !twoChoice.equals("Beard Cat") && !twoChoice.equals("Taco Cat") && !twoChoice.equals("Rainbow-Ralphing Cat") && !twoChoice.equals("Cattermelon"))
                    {
                        System.out.println("Does anyone want to use their Nope on Player 2's " + twoChoice + "?");
                        System.out.println("(Enter your player # for yes or enter 0 for no)");
                        nopeChoice = scan.nextInt();
                        System.out.println();
                        if (nopeChoice != 0)
                        { VisualNP np = new VisualNP();
            np.main();
                            switch (nopeChoice)
                            {
                                case 1:
                                if (player1.contains("Nope"))
                                {
                                    player1.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 3:
                                if (player3.contains("Nope"))
                                {
                                    player3.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 4:
                                if (player4.contains("Nope"))
                                {
                                    player4.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                            }
                            nopeChoice = 0;
                            secondPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    else
                    {
                        if (twoChoice.equals("Favor") || twoChoice.equals("Hairy Potato Cat") || twoChoice.equals("Beard Cat") || twoChoice.equals("Taco Cat") || twoChoice.equals("Rainbow-Ralphing Cat") || twoChoice.equals("Cattermelon"))
                        {
                            if (twoChoice.equals("Favor"))
                            {
                                System.out.println("Enter the player who you want to use favor on: ");
                                numFavor = scan.nextInt();
                            }
                            System.out.println("Does anyone want to use their Nope on Player 2's " + twoChoice + "?");
                            System.out.println("(Enter your player # for yes or enter 0 for no)");
                            nopeChoice = scan.nextInt();
                            System.out.println();
                            if (nopeChoice != 0)
                            { VisualNP np = new VisualNP();
            np.main();
                                switch (nopeChoice)
                                {
                                    case 1:
                                    if (player1.contains("Nope"))
                                    {
                                        player1.remove("Nope");
                                        discard.add("Nope");
                                        if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                        {
                                            player2.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                            {
                                                player2.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                        {
                                            player2.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                            {
                                                player2.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                        {
                                            player2.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                            {
                                                player2.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player2.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player2.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                        {
                                            player2.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                            {
                                                player2.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 3:
                                    if (player3.contains("Nope"))
                                    {
                                        player3.remove("Nope");
                                        discard.add("Nope");
                                        if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                        {
                                            player2.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                            {
                                                player2.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                        {
                                            player2.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                            {
                                                player2.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                        {
                                            player2.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                            {
                                                player2.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player2.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player2.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                        {
                                            player2.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                            {
                                                player2.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 4:
                                    if (player4.contains("Nope"))
                                    {
                                        player4.remove("Nope");
                                        discard.add("Nope");
                                        if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                        {
                                            player2.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (twoChoice.equals("Hairy Potato Cat") && player2.contains("Hairy Potato Cat"))
                                            {
                                                player2.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                        {
                                            player2.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (twoChoice.equals("Beard Cat") && player2.contains("Beard Cat"))
                                            {
                                                player2.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                        {
                                            player2.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (twoChoice.equals("Taco Cat") && player2.contains("Taco Cat"))
                                            {
                                                player2.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player2.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (twoChoice.equals("Rainbow-Ralphing Cat") && player2.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player2.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                        {
                                            player2.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (twoChoice.equals("Cattermelon") && player2.contains("Cattermelon"))
                                            {
                                                player2.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                }
                                nopeChoice = 0;
                                secondPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            if (nopeChoice == 0)
                            {
                                if (twoChoice.equals("Favor"))
                                { VisualFV f = new VisualFV();
                                  f.main();
                                    switch (numFavor)
                                    {
                                        case 1:
                                        if (!player1.contains("Exploding Kittens"))
                                        {
                                            firstPlayer(twoChoice,"null","null", size, EKC, player1, player2, player3, player4, 02);
                                        }
                                        break;
                                        case 3:
                                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                                        {  
                                            thirdPlayer("null",twoChoice,"null", size, EKC, player1, player2, player3, player4, 02);
                                        }
                                        break;
                                        case 4:
                                        if (size == 4 && !player4.contains("Exploding Kittens"))
                                        {
                                            fourthPlayer("null",twoChoice,"null", size, EKC, player1, player2, player3, player4, 02);
                                        }
                                        break;
                                    }
                                }
                                if (twoChoice.equals("Hairy Potato Cat"))
                                {
                                    if (!player2.contains("Hairy Potato Cat"))
                                    {
                                        player2.add("Hairy Potato Cat");
                                        discard.remove("Hairy Potato Cat");
                                    }
                                    else if (player2.contains("Hairy Potato Cat"))
                                    {
            VisualHPC hpc = new VisualHPC();
        hpc.main();
                                        player2.remove("Hairy Potato Cat");
                                        discard.add("Hairy Potato Cat");
                                        if (!player2.contains("Hairy Potato Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player2.contains("Hairy Potato Cat"))
                                        {
                                            player2.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (twoChoice.equals("Cattermelon"))
                                {
                                    if (!player2.contains("Cattermelon"))
                                    {
                                        player2.add("Cattermelon");
                                        discard.remove("Cattermelon");
                                    }
                                    else if (player2.contains("Cattermelon"))
                                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                                        player2.remove("Cattermelon");
                                        discard.add("Cattermelon");
                                        if (!player2.contains("Cattermelon"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player2.contains("Cattermelon"))
                                        {
                                            player2.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (twoChoice.equals("Rainbow-Ralphing Cat"))
                                {
                                    if (!player2.contains("Rainbow-Ralphing Cat"))
                                    {
                                        player2.add("Rainbow-Ralphing Cat");
                                        discard.remove("Rainbow-Ralphing Cat");
                                    }
                                    else if (player2.contains("Rainbow-Ralphing Cat"))
                                    {
VisualRRC r = new VisualRRC();
                r.main();
                                        player2.remove("Rainbow-Ralphing Cat");
                                        discard.add("Rainbow-Ralphing Cat");
                                        if (!player2.contains("Rainbow-Ralphing Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player2.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player2.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (twoChoice.equals("Beard Cat"))
                                {
                                    if (!player2.contains("Beard Cat"))
                                    {
                                        player2.add("Beard Cat");
                                        discard.remove("Beard Cat");
                                    }
                                    else if (player2.contains("Beard Cat"))
                                    {
VisualBC bc = new VisualBC();
        bc.main();
                                        player2.remove("Beard Cat");
                                        discard.add("Beard Cat");
                                        if (!player2.contains("Beard Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player2.contains("Beard Cat"))
                                        {
                                            player2.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (twoChoice.equals("Taco Cat"))
                                {
                                    if (!player2.contains("Taco Cat"))
                                    {
                                        player2.add("Taco Cat");
                                        discard.remove("Taco Cat");
                                    }
                                    else if (player2.contains("Taco Cat"))
                                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                                        player2.remove("Taco Cat");
                                        discard.add("Taco Cat");
                                        if (!player2.contains("Taco Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player2.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player2.contains("Taco Cat"))
                                        {
                                            player2.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                secondPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            System.out.println();
                        }
                    }
                }
                if (twoChoice.equals("Nope"))
                {
                    System.out.println("Nope can only be used to counter another card!");
                    secondPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                }
                if (twoChoice.equals("See the Future") && nopeChoice == 0)
                { VisualSTF stf = new VisualSTF();
                    stf.main();
                    System.out.println("Check your STF file to know the first three cards.");
                    System.out.println();
                    try
                    {
                        PrintWriter writer = new PrintWriter(p2STF);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p2STF, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("First Three Cards in the Deck: ");
                        bw.newLine();
                        for (int i = 0; i < 3; i++)
                        {
                            bw.write(EKC.get(i));
                            bw.newLine();
                        }
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                }
                if (twoChoice.equals("Skip") && nopeChoice == 0)
                { VisualSKP skip = new VisualSKP();
                    skip.main();
                    if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 3 && !player3.contains("Exploding Kittens"))
                    {
                        firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 4 && player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                    {
                        fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 4 && player3.contains("Exploding Kittens") && player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                    {
                        firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 2)
                    {
                        firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                }
                if (twoChoice.equals("Attack") && nopeChoice == 0)
                { VisualA a = new VisualA();
                    a.main();
                    if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null",twoChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 3 && !player3.contains("Exploding Kittens"))
                    {
                        firstPlayer(twoChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 4 && player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                    {
                        fourthPlayer("null",twoChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 4 && player3.contains("Exploding Kittens") && player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                    {
                        firstPlayer(twoChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (size == 2)
                    {
                        firstPlayer(twoChoice,"null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                }
                if (twoChoice.equals("Shuffle") && nopeChoice == 0)
                { VisualSHFL sh = new VisualSHFL();
                    sh.main();
                    player2Shuffle();
                    System.out.println("The Exploding Kittens deck has been shuffled.");
                    System.out.println();
                }
                if (twoChoice.equals("Favor") && nopeChoice == 0)
                { VisualFV f = new VisualFV();
                    f.main();
                    System.out.println("Enter the player who you want to use favor on: ");
                    numFavor = scan.nextInt();
                    switch (numFavor)
                    {
                        case 1:
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer(twoChoice, "null", "null", size, EKC, player1, player2, player3, player4, 02);
                        }
                        break;
                        case 3:
                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                        {  
                            thirdPlayer("null", twoChoice,"null", size, EKC, player1, player2, player3, player4, 02);
                        }
                        break;
                        case 4:
                        if (size == 4 && !player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null", twoChoice,"null", size, EKC, player1, player2, player3, player4, 02);
                        }
                        break;
                    }
                }//if choice is "Favor", then ask for a favor from any player
                if (twoChoice.equals("Hairy Potato Cat") && nopeChoice == 0)
                { 
                    if (!player2.contains("Hairy Potato Cat"))
                    {
                        player2.add("Hairy Potato Cat");
                        discard.remove("Hairy Potato Cat");
                    }
                    else if (player2.contains("Hairy Potato Cat"))
                    {
VisualHPC hpc = new VisualHPC();
        hpc.main();
                        player2.remove("Hairy Potato Cat");
                        discard.add("Hairy Potato Cat");
                        if (!player2.contains("Hairy Potato Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player2.contains("Hairy Potato Cat"))
                        {
                            player2.remove("Hairy Potato Cat");
                            discard.add("Hairy Potato Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (twoChoice.equals("Cattermelon") && nopeChoice == 0)
                {
                    if (!player2.contains("Cattermelon"))
                    {
                        player2.add("Cattermelon");
                        discard.remove("Cattermelon");
                    }
                    else if (player2.contains("Cattermelon"))
                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                        player2.remove("Cattermelon");
                        discard.add("Cattermelon");
                        if (!player2.contains("Cattermelon"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player2.contains("Cattermelon"))
                        {
                            player2.remove("Cattermelon");
                            discard.add("Cattermelon");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (twoChoice.equals("Rainbow-Ralphing Cat") && nopeChoice == 0)
                {                     if (!player2.contains("Rainbow-Ralphing Cat"))
                    {
                        player2.add("Rainbow-Ralphing Cat");
                        discard.remove("Rainbow-Ralphing Cat");
                    }
                    else if (player2.contains("Rainbow-Ralphing Cat"))
                    {
VisualRRC r = new VisualRRC();
                r.main();
                        player2.remove("Rainbow-Ralphing Cat");
                        discard.add("Rainbow-Ralphing Cat");
                        if (!player2.contains("Rainbow-Ralphing Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player2.contains("Rainbow-Ralphing Cat"))
                        {
                            player2.remove("Rainbow-Ralphing Cat");
                            discard.add("Rainbow-Ralphing Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (twoChoice.equals("Beard Cat") && nopeChoice == 0)
                {
                    if (!player2.contains("Beard Cat"))
                    {
                        player2.add("Beard Cat");
                        discard.remove("Beard Cat");
                    }
                    else if (player2.contains("Beard Cat"))
                    {
VisualBC bc = new VisualBC();
        bc.main();
                        player2.remove("Beard Cat");
                        discard.add("Beard Cat");
                        if (!player2.contains("Beard Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player2.contains("Beard Cat"))
                        {
                            player2.remove("Beard Cat");
                            discard.add("Beard Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (twoChoice.equals("Taco Cat") && nopeChoice == 0)
                { 
                    if (!player2.contains("Taco Cat"))
                    {
                        player2.add("Taco Cat");
                        discard.remove("Taco Cat");
                    }
                    else if (player2.contains("Taco Cat"))
                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                        player2.remove("Taco Cat");
                        discard.add("Taco Cat");
                        if (!player2.contains("Taco Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player2.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player2.contains("Taco Cat"))
                        {
                            player2.remove("Taco Cat");
                            discard.add("Taco Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(02,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
            }
        }while (!twoChoice.equals("d2"));
        if (twoChoice.equals("d2"))
        {
            player2.add(EKC.get(0));
            EKC.remove(0);
            System.out.println();
            if (player2.contains("Exploding Kittens"))
            {
                System.out.println("Player 2 - You got an Exploding Kitten. Defuse y/n?: ");
                defuseChoice = scan.nextLine();
                if (player2.contains("Defuse") && defuseChoice.equals("y"))
                {
VisualDF df = new VisualDF();
            df.main();
                    player2.remove("Defuse");
                    player2.remove("Exploding Kittens");
                    try
                    {
                        PrintWriter writer = new PrintWriter(p2);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p2, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("[End] Hand 2: " + player2);
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                    System.out.println("Where do you want to place the Exploding Kitten? (0-" + ((EKC.size())-1) + ")(0 is the top of the deck. " + ((EKC.size())-1) + " is the bottom of the deck.)(Ex. 1 is on top of the second card. 2 above the third card. Etc.)");
                    cardPos = scan.nextInt();
                    System.out.println();
                    for (int j = cardPos + 1; j < EKC.size(); j++)
                    {
                        EKC.set(j, EKC.get(j));
                    }
                    EKC.add(cardPos, "Exploding Kittens");
                }
                else
                {
VisualEK eks = new VisualEK();
            eks.main();
                    System.out.println("Player 2 has exploded.");
                    System.out.println();
                    End st = new End();
            if (size == 2)
            {
st.status(size, player1, player2, player1, player1);
                    }
                    if (size == 3)
                    {
        st.status(size, player1, player2, player3, player1);
                        if (!player3.contains("Exploding Kittens"))
                        {
                            thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player3.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    if (size == 4)
                    {
        st.status(size, player1, player2, player3, player4);
                        if (!player3.contains("Exploding Kittens"))
                        {
                            thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player3.contains("Exploding Kittens") && !player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player3.contains("Exploding Kittens") && player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
            }
            else
            {
                try
                {
                    PrintWriter writer = new PrintWriter(p2);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(p2, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("[End] Hand 2: " + player2);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                secondPlayer("null", "null", "null", size, EKC, player1, player2, player3, player4, stat);
            }
        }
    }//ends p2's attacked turn method and goes to p2’s normal turn

    public void thirdPlayerAttacked(String oneChoice, String twoChoice, String fourChoice, int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, ArrayList<String> player3, ArrayList<String> player4, int stat) throws IOException
    {
        Favored fav = new Favored(); 
        Tricat tri = new Tricat(); 
        Scanner scan = new Scanner(System.in);
        String h = "C:\\Users\\1049467\\Desktop\\EKHelp.txt";
        String p3 = "C:\\Users\\1049467\\Desktop\\EKHand3.txt";
        String p3STF = "C:\\Users\\1049467\\Desktop\\EKHand3STF.txt";
        String d = "C:\\Users\\1049467\\Desktop\\EKDiscard.txt";
        int pSteal;
        int numSteal;
        int numFavor = 0;
        int nopeChoice = 0;
        String strSteal;
        int n = 0;
        do
        {
            if (oneChoice.equals("Favor") || twoChoice.equals("Favor") || fourChoice.equals("Favor"))
            {
                fav.thirdPlayerFavored(oneChoice, twoChoice, fourChoice, size, EKC, player1, player2, player3, player4, stat);
            }
            try
            {
                PrintWriter writer = new PrintWriter(p3);
                writer.print("");
                writer.close();
                FileWriter fw = new FileWriter(p3, true);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.newLine();
                bw.write("[Start] Hand 3: " + player3);
                bw.close();
            }
            catch(IOException e)
            {
                System.out.println("Error " + e);
            }
            System.out.println("Card Count: " + (EKC.size()));
            System.out.println("Player 3 - Play or Draw (d3) or h (for help) or ragequit: ");
            threeChoice = scan.nextLine();
            if (threeChoice.equals("ragequit"))
            {
                System.exit(0);
            }
            if (threeChoice.equals("h"))
            {
                System.out.println("Check your desktop for a file called EKHelp.txt.");
                System.out.println("Delete all files when everyone is finished or when the game is discontinued.");
                try
                {
                    PrintWriter writer = new PrintWriter(h);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(h, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write("(*2) 2 cats = user chooses any player and takes a random card of user's choice");
                    bw.newLine();
                    bw.write("(*3) 3 cats = user chooses any player and types any card of their choice");
                    bw.newLine();
                    bw.write("(*3) (cont). if the opposing player has the card, then the user takes the card");
                    bw.newLine();
                    bw.write("(*3) (cont). else the opposing player doesn't have the card, then the user does not take any card");
                    bw.newLine();
                    bw.write("Skip - skips the player's turn who used Skip");
                    bw.newLine();
                    bw.write("Attack - skips the player's turn who used Attack and gives the next player 2 more turns");
                    bw.newLine();
                    bw.write("Shuffle - shuffles the deck");
                    bw.newLine();
                    bw.write("Favor - ask any player to give the player who used favor any card of the recipient's choice");
                    bw.newLine();
                    bw.write("Hairy Potato Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Cattermelon - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Rainbow-Ralphing Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Beard Cat - a cat (*2) (*3) ");
                    bw.newLine();
                    bw.write("Taco Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("See the Future - sees the top 3 cards of the deck");
                    bw.newLine();
                    bw.write("Nope - denies the action of any cards with special effects (including the 2 and 3 cat effects)");
                    bw.newLine();
                    bw.write("Exploding Kittens - a deadly kitten (cannot use Nope on this card) that explodes unless you have a defuse");
                    bw.newLine();
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
            }
            if (!threeChoice.equals("d3") && player3.contains(threeChoice))
            {
                player3.remove(threeChoice);
                discard.add(n, threeChoice);
                try
                {
                    PrintWriter writer = new PrintWriter(d);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(d, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("Discard Pile: " + discard);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
                n++;
                if (player1.contains("Nope") || player2.contains("Nope") || player4.contains("Nope"))
                {
                    if (!threeChoice.equals("Favor") && !threeChoice.equals("Hairy Potato Cat") || !threeChoice.equals("Beard Cat") && !threeChoice.equals("Taco Cat") && !threeChoice.equals("Rainbow-Ralphing Cat") && !threeChoice.equals("Cattermelon"))
                    {
                        System.out.println("Does anyone want to use their Nope on Player 3's " + threeChoice + "?");
                        System.out.println("(Enter your player # for yes or enter 0 for no)");
                        nopeChoice = scan.nextInt();
                        System.out.println();
                        if (nopeChoice != 0)
                        { VisualNP np = new VisualNP();
            np.main();
                            switch (nopeChoice)
                            {
                                case 1:
                                if (player1.contains("Nope"))
                                {
                                    player1.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 2:
                                if (player2.contains("Nope"))
                                {
                                    player2.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 4:
                                if (player4.contains("Nope"))
                                {
                                    player4.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                            }
                            nopeChoice = 0;
                            thirdPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    else
                    {
                        if (threeChoice.equals("Favor") || threeChoice.equals("Hairy Potato Cat") || threeChoice.equals("Beard Cat") || threeChoice.equals("Taco Cat") || threeChoice.equals("Rainbow-Ralphing Cat") || threeChoice.equals("Cattermelon"))
                        {
                            if (threeChoice.equals("Favor"))
                            {
                                System.out.println("Enter the player who you want to use favor on: ");
                                numFavor = scan.nextInt();
                            }
                            System.out.println("Does anyone want to use their Nope on Player 3's " + threeChoice + "?");
                            System.out.println("(Enter your player # for yes or enter 0 for no)");
                            nopeChoice = scan.nextInt();
                            System.out.println();
                            if (nopeChoice != 0)
                            { VisualNP np = new VisualNP();
            np.main();
                                switch (nopeChoice)
                                {
                                    case 1:
                                    if (player1.contains("Nope"))
                                    {
                                        player1.remove("Nope");
                                        discard.add("Nope");
                                        if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                        {
                                            player3.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                            {
                                                player3.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                        {
                                            player3.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                            {
                                                player3.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                        {
                                            player3.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                            {
                                                player3.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player3.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player3.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                        {
                                            player3.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                            {
                                                player3.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 2:
                                    if (player2.contains("Nope"))
                                    {
                                        player2.remove("Nope");
                                        discard.add("Nope");
                                        if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                        {
                                            player3.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                            {
                                                player3.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                        {
                                            player3.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                            {
                                                player3.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                        {
                                            player3.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                            {
                                                player3.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player3.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player3.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                        {
                                            player3.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                            {
                                                player3.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 4:
                                    if (player4.contains("Nope"))
                                    {
                                        player4.remove("Nope");
                                        discard.add("Nope");
                                        if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                        {
                                            player3.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (threeChoice.equals("Hairy Potato Cat") && player3.contains("Hairy Potato Cat"))
                                            {
                                                player3.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                        {
                                            player3.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (threeChoice.equals("Beard Cat") && player3.contains("Beard Cat"))
                                            {
                                                player3.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                        {
                                            player3.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (threeChoice.equals("Taco Cat") && player3.contains("Taco Cat"))
                                            {
                                                player3.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player3.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (threeChoice.equals("Rainbow-Ralphing Cat") && player3.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player3.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                        {
                                            player3.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (threeChoice.equals("Cattermelon") && player3.contains("Cattermelon"))
                                            {
                                                player3.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                }
                                nopeChoice = 0;
                                thirdPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            if (nopeChoice == 0)
                            {
                                if(threeChoice.equals("Favor"))
                                { VisualFV f = new VisualFV();
                                  f.main();
                                    switch (numFavor)
                                    {
                                        case 1:
                                        if (!player1.contains("Exploding Kittens"))
                                        {
                                            firstPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, 03);
                                        }
                                        break;
                                        case 2:
                                        if (!player2.contains("Exploding Kittens"))
                                        {  
                                            secondPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, 03);
                                        }
                                        break;
                                        case 4:
                                        if (size == 4 && !player4.contains("Exploding Kittens"))
                                        {
                                            fourthPlayer("null","null",threeChoice, size, EKC, player1, player2, player3, player4, 03);
                                        }
                                        break;
                                    }
                                }
                                if (threeChoice.equals("Hairy Potato Cat"))
                                {
                                    if (!player3.contains("Hairy Potato Cat"))
                                    {
                                        player3.add("Hairy Potato Cat");
                                        discard.remove("Hairy Potato Cat");
                                    }
                                    else if (player3.contains("Hairy Potato Cat"))
                                    {
VisualHPC hpc = new VisualHPC();
        hpc.main();
                                        player3.remove("Hairy Potato Cat");
                                        discard.add("Hairy Potato Cat");
                                        if (!player3.contains("Hairy Potato Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player3.contains("Hairy Potato Cat"))
                                        {
                                            player3.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (threeChoice.equals("Cattermelon"))
                                {
                                    if (!player3.contains("Cattermelon"))
                                    {
                                        player3.add("Cattermelon");
                                        discard.remove("Cattermelon");
                                    }
                                    else if (player3.contains("Cattermelon"))
                                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                                        player3.remove("Cattermelon");
                                        discard.add("Cattermelon");
                                        if (!player3.contains("Cattermelon"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }  
                                        }
                                        else if (player3.contains("Cattermelon"))
                                        {
                                            player3.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (threeChoice.equals("Rainbow-Ralphing Cat"))
                                {
                                    if (!player3.contains("Rainbow-Ralphing Cat"))
                                    {
                                        player3.add("Rainbow-Ralphing Cat");
                                        discard.remove("Rainbow-Ralphing Cat");
                                    }
                                    else if (player3.contains("Rainbow-Ralphing Cat"))
                                    {
VisualRRC r = new VisualRRC();
                r.main();
                                        player3.remove("Rainbow-Ralphing Cat");
                                        discard.add("Rainbow-Ralphing Cat");
                                        if (!player3.contains("Rainbow-Ralphing Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player3.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player3.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (threeChoice.equals("Beard Cat"))
                                {
                                    if (!player3.contains("Beard Cat"))
                                    {
                                        player3.add("Beard Cat");
                                        discard.remove("Beard Cat");
                                    }
                                    else if (player3.contains("Beard Cat"))
                                    {
VisualBC bc = new VisualBC();
        bc.main();
                                        player3.remove("Beard Cat");
                                        discard.add("Beard Cat");
                                        if (!player3.contains("Beard Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player3.contains("Beard Cat"))
                                        {
                                            player3.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (threeChoice.equals("Taco Cat"))
                                {
                                    if (!player3.contains("Taco Cat"))
                                    {
                                        player3.add("Taco Cat");
                                        discard.remove("Taco Cat");
                                    }
                                    else if (player3.contains("Taco Cat"))
                                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                                        player3.remove("Taco Cat");
                                        discard.add("Taco Cat");
                                        if (!player3.contains("Taco Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 4:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                                numSteal = scan.nextInt();
                                                player3.add(player4.get(numSteal));
                                                player4.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player3.contains("Taco Cat"))
                                        {
                                            player3.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                thirdPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            System.out.println();
                        }
                    }
                }
                if (threeChoice.equals("Nope"))
                {
                    System.out.println("Nope can only be used to counter another card!");
                    thirdPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                }
                if (threeChoice.equals("See the Future") && nopeChoice == 0)
                { VisualSTF stf = new VisualSTF();
                    stf.main();
                    System.out.println("Check your STF file to know the first three cards.");
                    System.out.println();
                    try
                    {
                        PrintWriter writer = new PrintWriter(p3STF);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p3STF, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("First Three Cards in the Deck: ");
                        bw.newLine();
                        for (int i = 0; i < 3; i++)
                        {
                            bw.write(EKC.get(i));
                            bw.newLine();
                        }
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                }
                if (threeChoice.equals("Skip") && nopeChoice == 0)
                { VisualSKP skip = new VisualSKP();
                    skip.main();
                    if (size == 3)
                    {
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    if (size == 4)
                    {
                        if (!player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Attack") && nopeChoice == 0)
                { VisualA a = new VisualA();
                   a.main();
                    if (size == 3)
                    {
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    if (size == 4)
                    {
                        if (!player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null","null",threeChoice, size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null",threeChoice,"null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Shuffle") && nopeChoice == 0)
                {   VisualSHFL sh = new VisualSHFL();
                    sh.main();
                    player3Shuffle();
                    System.out.println("The Exploding Kittens deck has been shuffled.");
                    System.out.println();
                }
                if (threeChoice.equals("Favor") && nopeChoice == 0)
                { VisualFV f = new VisualFV();
                    f.main();
                    System.out.println("Enter the player who you want to use favor on: ");
                    numFavor = scan.nextInt();
                    switch (numFavor)
                    {
                        case 1:
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null", threeChoice, "null", size, EKC, player1, player2, player3, player4, 03);
                        }
                        break;
                        case 2:
                        if (!player2.contains("Exploding Kittens"))
                        {  
                            secondPlayer("null", threeChoice,"null", size, EKC, player1, player2, player3, player4, 03);
                        }
                        break;
                        case 4:
                        if (size == 4 && !player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null", "null", threeChoice, size, EKC, player1, player2, player3, player4, 03);
                        }
                        break;
                    }
                }
                if (threeChoice.equals("Hairy Potato Cat") && nopeChoice == 0)
                {
                    if (!player3.contains("Hairy Potato Cat"))
                    {
                        player3.add("Hairy Potato Cat");
                        discard.remove("Hairy Potato Cat");
                    }
                    else if (player3.contains("Hairy Potato Cat"))
                    {
VisualHPC hpc = new VisualHPC();
        hpc.main();
                        player3.remove("Hairy Potato Cat");
                        discard.add("Hairy Potato Cat");
                        if (!player3.contains("Hairy Potato Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player3.contains("Hairy Potato Cat"))
                        {
                            player3.remove("Hairy Potato Cat");
                            discard.add("Hairy Potato Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Cattermelon") && nopeChoice == 0)
                {
                    if (!player3.contains("Cattermelon"))
                    {
                        player3.add("Cattermelon");
                        discard.remove("Cattermelon");
                    }
                    else if (player3.contains("Cattermelon"))
                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                        player3.remove("Cattermelon");
                        discard.add("Cattermelon");
                        if (!player3.contains("Cattermelon"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }  
                        }
                        else if (player3.contains("Cattermelon"))
                        {
                            player3.remove("Cattermelon");
                            discard.add("Cattermelon");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Rainbow-Ralphing Cat") && nopeChoice == 0)
                {
                    if (!player3.contains("Rainbow-Ralphing Cat"))
                    {
                        player3.add("Rainbow-Ralphing Cat");
                        discard.remove("Rainbow-Ralphing Cat");
                    }
                    else if (player3.contains("Rainbow-Ralphing Cat"))
                    {
VisualRRC r = new VisualRRC();
                r.main();
                        player3.remove("Rainbow-Ralphing Cat");
                        discard.add("Rainbow-Ralphing Cat");
                        if (!player3.contains("Rainbow-Ralphing Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player3.contains("Rainbow-Ralphing Cat"))
                        {
                            player3.remove("Rainbow-Ralphing Cat");
                            discard.add("Rainbow-Ralphing Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Beard Cat"))
                {
                    if (!player3.contains("Beard Cat"))
                    {
                        player3.add("Beard Cat");
                        discard.remove("Beard Cat");
                    }
                    else if (player3.contains("Beard Cat"))
                    {
VisualBC bc = new VisualBC();
        bc.main();
                        player3.remove("Beard Cat");
                        discard.add("Beard Cat");
                        if (!player3.contains("Beard Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player3.contains("Beard Cat"))
                        {

                            player3.remove("Beard Cat");
                            discard.add("Beard Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (threeChoice.equals("Taco Cat") && nopeChoice == 0)
                {
                    if (!player3.contains("Taco Cat"))
                    {
                        player3.add("Taco Cat");
                        discard.remove("Taco Cat");
                    }
                    else if (player3.contains("Taco Cat"))
                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                        player3.remove("Taco Cat");
                        discard.add("Taco Cat");
                        if (!player3.contains("Taco Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 4:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player4.size()-1));
                                numSteal = scan.nextInt();
                                player3.add(player4.get(numSteal));
                                player4.remove(numSteal);
                                break;
                            }
                        }
                        else if (player3.contains("Taco Cat"))
                        {
                            player3.remove("Taco Cat");
                            discard.add("Taco Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(03,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
            }
        }while (!threeChoice.equals("d3"));
        if (threeChoice.equals("d3"))
        {
            player3.add(EKC.get(0));
            EKC.remove(0);
            System.out.println();            
            if (player3.contains("Exploding Kittens"))
            {
                System.out.println("Player 3 - You got an Exploding Kitten. Defuse y/n?: ");
                defuseChoice = scan.nextLine();
                if (player3.contains("Defuse") && defuseChoice.equals("y"))
                {
VisualDF df = new VisualDF();
            df.main();
                    player3.remove("Defuse");
                    player3.remove("Exploding Kittens");
                    try
                    {
                        PrintWriter writer = new PrintWriter(p3);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p3, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("[End] Hand 3: " + player3);
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                    System.out.println("Where do you want to place the Exploding Kitten? (0-" + ((EKC.size())-1) + ")(0 is the top of the deck. " + ((EKC.size())-1) + " is the bottom of the deck.)(Ex. 1 is on top of the second card. 2 above the third card. Etc.)");
                    cardPos = scan.nextInt();
                    System.out.println();
                    for (int j = cardPos + 1; j < EKC.size(); j++)
                    {
                        EKC.set(j, EKC.get(j));
                    }
                    EKC.add(cardPos, "Exploding Kittens");
                }
                else
                {
VisualEK eks = new VisualEK();
            eks.main();
                    System.out.println("Player 3 has exploded.");
                    System.out.println();
                    End st = new End();
                    if (size == 3)
                    {
        st.status(size, player1, player2, player3, player4);
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    if (size == 4)
                    {
        st.status(size, player1, player2, player3, player4);
                        if (!player4.contains("Exploding Kittens"))
                        {
                            fourthPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && !player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                        else if (player4.contains("Exploding Kittens") && player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                        {
                            secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
            }
            else
            {
                try
                {
                    FileWriter fw = new FileWriter(p3, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("[End] Hand 3: " + player3);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                thirdPlayer("null", "null", "null", size, EKC, player1, player2, player3, player4, stat);
            }
        }
    }//ends p3's attacked turn method and goes to p3’s normal turn

    public void fourthPlayerAttacked(String oneChoice, String twoChoice, String threeChoice, int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, ArrayList<String> player3, ArrayList<String> player4, int stat) throws IOException
    {
        Favored fav = new Favored(); 
        Tricat tri = new Tricat(); 
        Scanner scan = new Scanner(System.in);
        String h = "C:\\Users\\1049467\\Desktop\\EKHelp.txt";
        String p4 = "C:\\Users\\1049467\\Desktop\\EKHand4.txt";
        String p4STF = "C:\\Users\\1049467\\Desktop\\EKHand4STF.txt";
        String d = "C:\\Users\\1049467\\Desktop\\EKDiscard.txt";
        int pSteal;
        int numSteal;
        int numFavor = 0;
        int nopeChoice = 0;
        String strSteal;
        int n = 0;
        do
        {
            if (oneChoice.equals("Favor") || twoChoice.equals("Favor") || threeChoice.equals("Favor"))
            {
                fav.fourthPlayerFavored(oneChoice, twoChoice, threeChoice, size, EKC, player1, player2, player3, player4, stat);
            }
            try
            {
                PrintWriter writer = new PrintWriter(p4);
                writer.print("");
                writer.close();
                FileWriter fw = new FileWriter(p4, true);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.newLine();
                bw.write("[Start] Hand 4: " + player4);
                bw.close();
            }
            catch(IOException e)
            {
                System.out.println("Error " + e);
            }
            System.out.println("Card Count: " + (EKC.size()));
            System.out.println("Player 4 - Play or Draw (d4) or h (for help) or ragequit: ");
            fourChoice = scan.nextLine();
            if (fourChoice.equals("ragequit"))
            {
                System.exit(0);
            }
            if (fourChoice.equals("h"))
            {
                System.out.println("Check your desktop for a file called EKHelp.txt.");
                System.out.println("Delete all files when everyone is finished or when the game is discontinued.");
                try
                {
                    PrintWriter writer = new PrintWriter(h);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(h, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write("(*2) 2 cats = user chooses any player and takes a random card of user's choice");
                    bw.newLine();
                    bw.write("(*3) 3 cats = user chooses any player and types any card of their choice");
                    bw.newLine();
                    bw.write("(*3) (cont). if the opposing player has the card, then the user takes the card");
                    bw.newLine();
                    bw.write("(*3) (cont). else the opposing player doesn't have the card, then the user does not take any card");
                    bw.newLine();
                    bw.write("Skip - skips the player's turn who used Skip");
                    bw.newLine();
                    bw.write("Attack - skips the player's turn who used Attack and gives the next player 2 more turns");
                    bw.newLine();
                    bw.write("Shuffle - shuffles the deck");
                    bw.newLine();
                    bw.write("Favor - ask any player to give the player who used favor any card of the recipient's choice");
                    bw.newLine();
                    bw.write("Hairy Potato Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Cattermelon - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Rainbow-Ralphing Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("Beard Cat - a cat (*2) (*3) ");
                    bw.newLine();
                    bw.write("Taco Cat - a cat (*2) (*3)");
                    bw.newLine();
                    bw.write("See the Future - sees the top 3 cards of the deck");
                    bw.newLine();
                    bw.write("Nope - denies the action of any cards with special effects (including the 2 and 3 cat effects)");
                    bw.newLine();
                    bw.write("Exploding Kittens - a deadly kitten (cannot use Nope on this card) that explodes unless you have a defuse");
                    bw.newLine();
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
            }
            if (!fourChoice.equals("d4") && player4.contains(fourChoice))
            {
                player4.remove(fourChoice);
                discard.add(n, fourChoice);
                try
                {
                    PrintWriter writer = new PrintWriter(d);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(d, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("Discard Pile: " + discard);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                System.out.println();
                n++;
                if (player1.contains("Nope") || player2.contains("Nope") || player3.contains("Nope"))
                {
                    if (!fourChoice.equals("Favor") && !fourChoice.equals("Hairy Potato Cat") && !fourChoice.equals("Beard Cat") && !fourChoice.equals("Taco Cat") && !fourChoice.equals("Rainbow-Ralphing Cat") && !fourChoice.equals("Cattermelon"))
                    {
                        System.out.println("Does anyone want to use their Nope on Player 4's " + fourChoice + "?");
                        System.out.println("(Enter your player # for yes or enter 0 for no)");
                        nopeChoice = scan.nextInt();
                        System.out.println();
                        if (nopeChoice != 0)
                        { VisualNP np = new VisualNP();
            np.main();
                            switch (nopeChoice)
                            {
                                case 1:
                                if (player1.contains("Nope"))
                                {
                                    player1.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 2:
                                if (player2.contains("Nope"))
                                {
                                    player2.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                                case 3:
                                if (player3.contains("Nope"))
                                {
                                    player3.remove("Nope");
                                    discard.add("Nope");
                                }
                                break;
                            }
                            nopeChoice = 0;
                            fourthPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                        }
                    }
                    else
                    {
                        if (fourChoice.equals("Favor") || fourChoice.equals("Hairy Potato Cat") || fourChoice.equals("Beard Cat") || fourChoice.equals("Taco Cat") || fourChoice.equals("Rainbow-Ralphing Cat") || fourChoice.equals("Cattermelon"))
                        {
                            if (fourChoice.equals("Favor"))
                            {
                                System.out.println("Enter the player who you want to use favor on: ");
                                numFavor = scan.nextInt();
                            }
                            System.out.println("Does anyone want to use their Nope on Player 4's " + fourChoice + "?");
                            System.out.println("(Enter your player # for yes or enter 0 for no)");
                            nopeChoice = scan.nextInt();
                            System.out.println();
                            if (nopeChoice != 0)
                            { VisualNP np = new VisualNP();
            np.main();
                                switch (nopeChoice)
                                {
                                    case 1:
                                    if (player1.contains("Nope"))
                                    {
                                        player1.remove("Nope");
                                        discard.add("Nope");
                                        if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                        {
                                            player4.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                            {
                                                player4.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                        {
                                            player4.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                            {
                                                player4.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                        {
                                            player4.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                            {
                                                player4.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player4.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player4.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                        {
                                            player4.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                            {
                                                player4.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 2:
                                    if (player2.contains("Nope"))
                                    {
                                        player2.remove("Nope");
                                        discard.add("Nope");
                                        if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                        {
                                            player4.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                            {
                                                player4.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                        {
                                            player4.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                            {
                                                player4.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                        {
                                            player4.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                            {
                                                player4.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player4.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player4.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                        {
                                            player4.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                            {
                                                player4.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                    case 3:
                                    if (player3.contains("Nope"))
                                    {
                                        player3.remove("Nope");
                                        discard.add("Nope");
                                        if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                        {
                                            player4.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            if (fourChoice.equals("Hairy Potato Cat") && player4.contains("Hairy Potato Cat"))
                                            {
                                                player4.remove("Hairy Potato Cat");
                                                discard.add("Hairy Potato Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                        {
                                            player4.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            if (fourChoice.equals("Beard Cat") && player4.contains("Beard Cat"))
                                            {
                                                player4.remove("Beard Cat");
                                                discard.add("Beard Cat");
                                            }//removes all 3 Hairy Potato Cat
                                        }//removes all 2 Hairy Potato Cat
                                        if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                        {
                                            player4.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            if (fourChoice.equals("Taco Cat") && player4.contains("Taco Cat"))
                                            {
                                                player4.remove("Taco Cat");
                                                discard.add("Taco Cat");
                                            }//removes all 3 Taco Cat
                                        }//removes all 2 Taco Cat
                                        if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player4.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            if (fourChoice.equals("Rainbow-Ralphing Cat") && player4.contains("Rainbow-Ralphing Cat"))
                                            {
                                                player4.remove("Rainbow-Ralphing Cat");
                                                discard.add("Rainbow-Ralphing Cat");
                                            }//removes all 3 Rainbow-Ralphing Cat
                                        }//removes all 2 Rainbow-Ralphing Cat
                                        if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                        {
                                            player4.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            if (fourChoice.equals("Cattermelon") && player4.contains("Cattermelon"))
                                            {
                                                player4.remove("Cattermelon");
                                                discard.add("Cattermelon");
                                            }//removes all 3 Cattermelon
                                        }//removes all 2 Cattermelon
                                        try
                                        {
                                            PrintWriter writer = new PrintWriter(d);
                                            writer.print("");
                                            writer.close();
                                            FileWriter fw = new FileWriter(d, true);
                                            BufferedWriter bw = new BufferedWriter(fw);
                                            bw.newLine();
                                            bw.write("Discard Pile: " + discard);
                                            bw.close();
                                        }//writes discard pile into discard file
                                        catch(IOException e)
                                        {
                                            System.out.println("Error " + e);
                                        }//checks and displays error if there is an error
                                    }
                                    break;
                                }
                                nopeChoice = 0;
                                fourthPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            if (nopeChoice == 0)
                            {
                                if (fourChoice.equals("Favor"))
                                { VisualFV f = new VisualFV();
                                  f.main();
                                    switch (numFavor)
                                    {
                                        case 1:
                                        if (!player1.contains("Exploding Kittens"))
                                        {
                                            firstPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                                        }
                                        break;
                                        case 2:
                                        if (!player2.contains("Exploding Kittens"))
                                        {  
                                            secondPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                                        }
                                        break;
                                        case 3:
                                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                                        {
                                            thirdPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                                        }
                                        break;
                                    }
                                }
                                if (fourChoice.equals("Hairy Potato Cat"))
                                {
                                    if (!player4.contains("Hairy Potato Cat"))
                                    {
                                        player4.add("Hairy Potato Cat");
                                        discard.remove("Hairy Potato Cat");
                                    }
                                    else if (player4.contains("Hairy Potato Cat"))
                                    {
VisualHPC hpc = new VisualHPC();
        hpc.main();
                                        player4.remove("Hairy Potato Cat");
                                        discard.add("Hairy Potato Cat");
                                        if (!player4.contains("Hairy Potato Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player4.contains("Hairy Potato Cat"))
                                        {
                                            player4.remove("Hairy Potato Cat");
                                            discard.add("Hairy Potato Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (fourChoice.equals("Cattermelon"))
                                {
                                    if (!player4.contains("Cattermelon"))
                                    {
                                        player4.add("Cattermelon");
                                        discard.remove("Cattermelon");
                                    }
                                    else if (player4.contains("Cattermelon"))
                                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                                        player4.remove("Cattermelon");
                                        discard.add("Cattermelon");
                                        if (!player4.contains("Cattermelon"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player4.contains("Cattermelon"))
                                        {
                                            player4.remove("Cattermelon");
                                            discard.add("Cattermelon");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (fourChoice.equals("Rainbow-Ralphing Cat"))
                                {
                                    if (!player4.contains("Rainbow-Ralphing Cat"))
                                    {
                                        player4.add("Rainbow-Ralphing Cat");
                                        discard.remove("Rainbow-Ralphing Cat");
                                    }
                                    else if (player4.contains("Rainbow-Ralphing Cat"))
                                    {
VisualRRC r = new VisualRRC();
                r.main();
                                        player4.remove("Rainbow-Ralphing Cat");
                                        discard.add("Rainbow-Ralphing Cat");
                                        if (!player4.contains("Rainbow-Ralphing Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player4.contains("Rainbow-Ralphing Cat"))
                                        {
                                            player4.remove("Rainbow-Ralphing Cat");
                                            discard.add("Rainbow-Ralphing Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (fourChoice.equals("Beard Cat"))
                                {
                                    if (!player4.contains("Beard Cat"))
                                    {
                                        player4.add("Beard Cat");
                                        discard.remove("Beard Cat");
                                    }
                                    else if (player4.contains("Beard Cat"))
                                    {
VisualBC bc = new VisualBC();
        bc.main();
                                        player4.remove("Beard Cat");
                                        discard.add("Beard Cat");
                                        if (!player4.contains("Beard Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player4.contains("Beard Cat"))
                                        {
                                            player4.remove("Beard Cat");
                                            discard.add("Beard Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                if (fourChoice.equals("Taco Cat"))
                                {
                                    if (!player4.contains("Taco Cat"))
                                    {
                                        player4.add("Taco Cat");
                                        discard.remove("Taco Cat");
                                    }
                                    else if (player4.contains("Taco Cat"))
                                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                                        player4.remove("Taco Cat");
                                        discard.add("Taco Cat");
                                        if (!player4.contains("Taco Cat"))
                                        {
                                            System.out.println("Input a player's number to steal a card from:");
                                            pSteal = scan.nextInt();
                                            switch (pSteal)
                                            {
                                                case 1:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player1.get(numSteal));
                                                player1.remove(numSteal);
                                                break;
                                                case 2:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player2.get(numSteal));
                                                player2.remove(numSteal);
                                                break;
                                                case 3:
                                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                                numSteal = scan.nextInt();
                                                player4.add(player3.get(numSteal));
                                                player3.remove(numSteal);
                                                break;
                                            }
                                        }
                                        else if (player4.contains("Taco Cat"))
                                        {
                                            player4.remove("Taco Cat");
                                            discard.add("Taco Cat");
                                            System.out.println("Input a player's number to steal a card from: ");
                                            pSteal = scan.nextInt();
                                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                                        }
                                    }
                                }
                                fourthPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                            }
                            System.out.println();
                        }
                    }
                }
                if (fourChoice.equals("Nope"))
                {
                    System.out.println("Nope can only be used to counter another card!");
                    fourthPlayerAttacked("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                }
                if (fourChoice.equals("See the Future") && nopeChoice == 0)
                { VisualSTF stf = new VisualSTF();
                    stf.main();
                    System.out.println("Check your STF file to know the first three cards.");
                    System.out.println();
                    try
                    {
                        PrintWriter writer = new PrintWriter(p4STF);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p4STF, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("First Three Cards in the Deck: ");
                        bw.newLine();
                        for (int i = 0; i < 3; i++)
                        {
                            bw.write(EKC.get(i));
                            bw.newLine();
                        }
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                }
                if (fourChoice.equals("Skip") && nopeChoice == 0)
                { VisualSKP skip = new VisualSKP();
                   skip.main();
                    if (!player1.contains("Exploding Kittens"))
                    {
                        firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                    {
                        secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                }
                if (fourChoice.equals("Attack") && nopeChoice == 0)
                { VisualA a = new VisualA();
                    a.main();
                    if (!player1.contains("Exploding Kittens"))
                    {
                        firstPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                    {
                        secondPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, stat);
                    }
                }
                if (fourChoice.equals("Shuffle") && nopeChoice == 0)
                {   VisualSHFL sh = new VisualSHFL();
                    sh.main();
                    player4Shuffle();
                    System.out.println("The Exploding Kittens deck has been shuffled.");
                    System.out.println();
                }
                if (fourChoice.equals("Favor") && nopeChoice == 0)
                { VisualFV f = new VisualFV();
                    f.main();
                    System.out.println("Enter the player who you want to use favor on: ");
                    numFavor = scan.nextInt();
                    switch (numFavor)
                    {
                        case 1:
                        if (!player1.contains("Exploding Kittens"))
                        {
                            firstPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                        }
                        break;
                        case 2:
                        if (!player2.contains("Exploding Kittens"))
                        {  
                            secondPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                        }
                        break;
                        case 3:
                        if (size == 3 || size == 4 && !player3.contains("Exploding Kittens"))
                        {
                            thirdPlayer("null","null",fourChoice, size, EKC, player1, player2, player3, player4, 04);
                        }
                        break;
                    }
                }
                if (fourChoice.equals("Hairy Potato Cat") && nopeChoice == 0)
                {
                    if (!player4.contains("Hairy Potato Cat"))
                    {
                        player4.add("Hairy Potato Cat");
                        discard.remove("Hairy Potato Cat");
                    }
                    else if (player4.contains("Hairy Potato Cat"))
                    {
VisualHPC hpc = new VisualHPC();
        hpc.main();
                        player4.remove("Hairy Potato Cat");
                        discard.add("Hairy Potato Cat");
                        if (!player4.contains("Hairy Potato Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                            }
                        }
                        else if (player4.contains("Hairy Potato Cat"))
                        {
                            player4.remove("Hairy Potato Cat");
                            discard.add("Hairy Potato Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (fourChoice.equals("Cattermelon") && nopeChoice == 0)
                {
                    if (!player4.contains("Cattermelon"))
                    {
                        player4.add("Cattermelon");
                        discard.remove("Cattermelon");
                    }
                    else if (player4.contains("Cattermelon"))
                    {
VisualCM cm = new VisualCM();
                                       cm.main();
                        player4.remove("Cattermelon");
                        discard.add("Cattermelon");
                        if (!player4.contains("Cattermelon"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                            }
                        }
                        else if (player4.contains("Cattermelon"))
                        {
                            player4.remove("Cattermelon");
                            discard.add("Cattermelon");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (fourChoice.equals("Rainbow-Ralphing Cat") && nopeChoice == 0)
                {
                    if (!player4.contains("Rainbow-Ralphing Cat"))
                    {
                        player4.add("Rainbow-Ralphing Cat");
                        discard.remove("Rainbow-Ralphing Cat");
                    }
                    else if (player4.contains("Rainbow-Ralphing Cat"))
                    {
VisualRRC r = new VisualRRC();
                r.main();
                        player4.remove("Rainbow-Ralphing Cat");
                        discard.add("Rainbow-Ralphing Cat");
                        if (!player4.contains("Rainbow-Ralphing Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                            }
                        }
                        else if (player4.contains("Rainbow-Ralphing Cat"))
                        {
                            player4.remove("Rainbow-Ralphing Cat");
                            discard.add("Rainbow-Ralphing Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (fourChoice.equals("Beard Cat") && nopeChoice == 0)
                {
                    if (!player4.contains("Beard Cat"))
                    {
                        player4.add("Beard Cat");
                        discard.remove("Beard Cat");
                    }
                    else if (player4.contains("Beard Cat"))
                    {
        VisualBC bc = new VisualBC();
        bc.main();
                        player4.remove("Beard Cat");
                        discard.add("Beard Cat");
                        if (!player4.contains("Beard Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                            }
                        }
                        else if (player4.contains("Beard Cat"))
                        {
                            player4.remove("Beard Cat");
                            discard.add("Beard Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
                if (fourChoice.equals("Taco Cat") && nopeChoice == 0)
                {
                    if (!player4.contains("Taco Cat"))
                    {
                        player4.add("Taco Cat");
                        discard.remove("Taco Cat");
                    }
                    else if (player4.contains("Taco Cat"))
                    {
VisualTC tc = new VisualTC();
                                       tc.main();
                        player4.remove("Taco Cat");
                        discard.add("Taco Cat");
                        if (!player4.contains("Taco Cat"))
                        {
                            System.out.println("Input a player's number to steal a card from:");
                            pSteal = scan.nextInt();
                            switch (pSteal)
                            {
                                case 1:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player1.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player1.get(numSteal));
                                player1.remove(numSteal);
                                break;
                                case 2:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player2.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player2.get(numSteal));
                                player2.remove(numSteal);
                                break;
                                case 3:
                                System.out.println("Choose a number to randomly pick a card from the hand: " + "(left to right) 0-" + (player3.size()-1));
                                numSteal = scan.nextInt();
                                player4.add(player3.get(numSteal));
                                player3.remove(numSteal);
                                break;
                            }
                        }
                        else if (player4.contains("Taco Cat"))
                        {
                            player4.remove("Taco Cat");
                            discard.add("Taco Cat");
                            System.out.println("Input a player's number to steal a card from: ");
                            pSteal = scan.nextInt();
                            tri.threeCatEffect(04,pSteal,size,EKC, player1, player2, player3, player4, stat);
                        }
                    }
                }
            }
        }while (!fourChoice.equals("d4"));
        if (fourChoice.equals("d4"))
        {
            player4.add(EKC.get(0));
            EKC.remove(0);
            System.out.println();
            if (player4.contains("Exploding Kittens"))
            {
                System.out.println("Player 4 - You got an Exploding Kitten. Defuse y/n?: ");
                defuseChoice = scan.nextLine();
                if (player4.contains("Defuse") && defuseChoice.equals("y"))
                {
VisualDF df = new VisualDF();
            df.main();
                    player4.remove("Defuse");
                    player4.remove("Exploding Kittens");
                    try
                    {
                        PrintWriter writer = new PrintWriter(p4);
                        writer.print("");
                        writer.close();
                        FileWriter fw = new FileWriter(p4, true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        bw.newLine();
                        bw.write("[End] Hand 4: " + player4);
                        bw.close();
                    }
                    catch(IOException e)
                    {
                        System.out.println("Error " + e);
                    }
                    System.out.println("Where do you want to place the Exploding Kitten? (0-" + ((EKC.size())-1) + ")(0 is the top of the deck. " + ((EKC.size())-1) + " is the bottom of the deck.)(Ex. 1 is on top of the second card. 2 above the third card. Etc.)");
                    cardPos = scan.nextInt();
                    System.out.println();
                    for (int j = cardPos + 1; j < EKC.size(); j++)
                    {
                        EKC.set(j, EKC.get(j));
                    }
                    EKC.add(cardPos, "Exploding Kittens");
                }
                else
                {
VisualEK eks = new VisualEK();
            eks.main();
                    System.out.println("Player 4 has exploded.");
                    System.out.println();
                    End st = new End();
        st.status(size, player1, player2, player3, player4);
                    if (!player1.contains("Exploding Kittens"))
                    {
                        firstPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && !player2.contains("Exploding Kittens"))
                    {
                        secondPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                    else if (player1.contains("Exploding Kittens") && player2.contains("Exploding Kittens") && !player3.contains("Exploding Kittens"))
                    {
                        thirdPlayer("null","null","null", size, EKC, player1, player2, player3, player4, stat);
                    }
                }
            }
            else
            {
                try
                {
                    PrintWriter writer = new PrintWriter(p4);
                    writer.print("");
                    writer.close();
                    FileWriter fw = new FileWriter(p4, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.newLine();
                    bw.write("[End] Hand 4: " + player4);
                    bw.close();
                }
                catch(IOException e)
                {
                    System.out.println("Error " + e);
                }
                fourthPlayer("null", "null", "null", size, EKC, player1, player2, player3, player4, stat);
            }
        }
    }//ends p4's attacked turn method and goes to p4’s normal turn
}//ends Attacked class






