import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.util.Scanner;
import java.util.*;
import java.io.File;
import java.io.IOException;
import java.io.FileWriter;
import java.io.BufferedWriter;
/**
 * The class Players is a component of the replica of the Exploding Kittens game. 
 * @prereq      none
 * @param      size, EKC, player1, player2, player3
 * @return       none             
 * @post        The program prints out a window containing a simulation of the game "Exploding Kittens" and inputs into and outputs files representing components of "Exploding Kittens".
 * Andy Yim and Tommy Yim 
 * 
 */
public class Players
{
    // instance variables
    ArrayList<String> player1, player2, player3, player4;
    private EK EKstart;
    /**
     * Constructor for objects of class Players
     */
    public Players()
    {
        // initialise instance variables
        player1 = new ArrayList<String>();
        player2 = new ArrayList<String>();
        player3 = new ArrayList<String>();
        player4 = new ArrayList<String>();
    }//ends Players constructor
    public void firstPlayerStart(int size, ArrayList<String> EKC, int stat) throws IOException
    {
        String p1 = "C:\\Users\\1049467\\Desktop\\EKHand1.txt";
        for (int i = 0; i < 4; i++)
        {
            if (EKC.get(i).equals("Exploding Kittens") && !EKC.get(i+1).equals("Exploding Kittens"))
            {
                player1.add(EKC.get(i+1));
                EKC.remove(EKC.get(i+1));
            }//if the first card is EK second card is not an EK, then draw a card
            else if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && !EKC.get(i+2).equals("Exploding Kittens"))
            {
                player1.add(EKC.get(i+2));
                EKC.remove(EKC.get(i+2));
            }//if the first card and second card is EK and if the third card is not an EK, then draw a card
            else if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && EKC.get(i+2).equals("Exploding Kittens") && !EKC.get(i+3).equals("Exploding Kittens"))
            {
                player1.add(EKC.get(i+3));
                EKC.remove(EKC.get(i+3));
            }//if the first card and second card and third card is EK and if the fourth card is not an EK, then draw a card
            else if (!EKC.get(i).equals("Exploding Kittens"))
            {
                player1.add(EKC.get(i));
                EKC.remove(i);
            }//if the first card is not an EK, then draw a card
        }//gets 4 cards for p1
        player1.add("Defuse"); //adds a defuse to p1's hand
        player1Shuffle();
        try
        {
            FileWriter fw = new FileWriter(p1, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.newLine();
            bw.write("[Start] Hand 1: " + player1);
            bw.close();
        }//write p1's hand into p1 file
        catch(IOException e)
        {
            System.out.println("Error " + e);
        }//checks for error and displays error
        secondPlayerStart(size, EKC, player1, stat);
    }//ends player1's method for getting their hand
    public void secondPlayerStart(int size, ArrayList<String> EKC, ArrayList<String> player1, int stat) throws IOException
    {
        String p2 = "C:\\Users\\1049467\\Desktop\\EKHand2.txt";
        for (int i = 0; i < 4; i++)
        {
            if (EKC.get(i).equals("Exploding Kittens") && !EKC.get(i+1).equals("Exploding Kittens"))
            {
                player2.add(EKC.get(i+1));
                EKC.remove(EKC.get(i+1));
            }//if the first card is EK second card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && !EKC.get(i+2).equals("Exploding Kittens"))
            {
                player2.add(EKC.get(i+2));
                EKC.remove(EKC.get(i+2));
            }//if the first card and second card is EK and if the third card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && EKC.get(i+2).equals("Exploding Kittens") && !EKC.get(i+3).equals("Exploding Kittens"))
            {
                player2.add(EKC.get(i+3));
                EKC.remove(EKC.get(i+3));
            }//if the first card and second card and third card is EK and if the fourth card is not an EK, then draw a card
            if (!EKC.get(i).equals("Exploding Kittens"))
            {
                player2.add(EKC.get(i));
                EKC.remove(i);
            }//if the first card is not an EK, then draw a card
        }//gets 4 cards for p2
        player2.add("Defuse");
        player2Shuffle();
        try
        {
            FileWriter fw = new FileWriter(p2, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("[Original] Hand 2: " + player2);
            bw.close();
        }//writes p2's hand into file
        catch(IOException e)
        {
            System.out.println("Error " + e);
        }//checks and displays error if there is an error
        if (size == 3 || size == 4)
        {
            thirdPlayerStart(size, EKC, player1, player2, stat);
        }
        else
        {
            defuseAndShuffle(size, EKC);
            Game g = new Game();
            g.firstPlayer("null","null","null",size, EKC, player1, player2, player1, player1, stat);
        }//ends else block
    }//ends player2's method for getting their hand
    public void thirdPlayerStart(int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, int stat) throws IOException
    {
        String p3 = "C:\\Users\\1049467\\Desktop\\EKHand3.txt";
        for (int i = 0; i < 4; i++)
        {
            if (EKC.get(i).equals("Exploding Kittens") && !EKC.get(i+1).equals("Exploding Kittens"))
            {
                player3.add(EKC.get(i+1));
                EKC.remove(EKC.get(i+1));
            }//if the first card is EK second card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && !EKC.get(i+2).equals("Exploding Kittens"))
            {
                player3.add(EKC.get(i+2));
                EKC.remove(EKC.get(i+2));
            }//if the first card and second card is EK and if the third card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && EKC.get(i+2).equals("Exploding Kittens") && !EKC.get(i+3).equals("Exploding Kittens"))
            {
                player3.add(EKC.get(i+3));
                EKC.remove(EKC.get(i+3));
            }//if the first card and second card and third card is EK and if the fourth card is not an EK, then draw a card
            if (!EKC.get(i).equals("Exploding Kittens"))
            {
                player3.add(EKC.get(i));
                EKC.remove(i);
            }//if the first card is not an EK, then draw a card
        }//gets 4 cards for p3
        player3.add("Defuse");
        player3Shuffle();
        try
        {
            FileWriter fw = new FileWriter(p3, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("[Original] Hand 3: " + player3);
            bw.close();
        }//writes p3's hand into file
        catch(IOException e)
        {
            System.out.println("Error " + e);
        }//checks and displays error if there is an error
        if (size == 4)
        {
            fourthPlayerStart(size, EKC, player1, player2, player3, stat);
        }//ends if statement 
        else
        {
            defuseAndShuffle(size, EKC);
            Game g = new Game();
            g.firstPlayer("null","null","null",size, EKC, player1, player2, player3, player1, stat);
        }//ends else block
    }//ends player3's method for getting their hand
    public void fourthPlayerStart(int size, ArrayList<String> EKC, ArrayList<String> player1, ArrayList<String> player2, ArrayList<String> player3, int stat) throws IOException
    {
        String p4 = "C:\\Users\\1049467\\Desktop\\EKHand4.txt";
        for (int i = 0; i < 4; i++)
        {
            if (EKC.get(i).equals("Exploding Kittens") && !EKC.get(i+1).equals("Exploding Kittens"))
            {
                player4.add(EKC.get(i+1));
                EKC.remove(EKC.get(i+1));
            }//if the first card is EK second card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && !EKC.get(i+2).equals("Exploding Kittens"))
            {
                player4.add(EKC.get(i+2));
                EKC.remove(EKC.get(i+2));
            }//if the first card and second card is EK and if the third card is not an EK, then draw a card
            if (EKC.get(i).equals("Exploding Kittens") && EKC.get(i+1).equals("Exploding Kittens") && EKC.get(i+2).equals("Exploding Kittens") && !EKC.get(i+3).equals("Exploding Kittens"))
            {
                player4.add(EKC.get(i+3));
                EKC.remove(EKC.get(i+3));
            }//if the first card and second card and third card is EK and if the fourth card is not an EK, then draw a card
            if (!EKC.get(i).equals("Exploding Kittens"))
            {
                player4.add(EKC.get(i));
                EKC.remove(i);
            }//if the first card is not an EK, then draw a card
        }//gets 4 cards for p4
        player4.add("Defuse");
        player4Shuffle();
        try
        {
            FileWriter fw = new FileWriter(p4, true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("[Original] Hand 4: " + player4);
            bw.close();
        }//writes p4's hand into file
        catch(IOException e)
        {
            System.out.println("Error " + e);
        }//checks and displays error if there is an error
        defuseAndShuffle(size, EKC);
        Game g = new Game();
        g.firstPlayer("null","null","null",size, EKC, player1, player2, player3, player4, stat);
    }//ends player4's method for getting their hand
    public void player1Shuffle()
    {
        Collections.shuffle(player1);
    }//shuffles hand of player1
    public void player2Shuffle()
    {
        Collections.shuffle(player2);
    }//shuffles hand of player2
    public void player3Shuffle()
    {
        Collections.shuffle(player3);
    }//shuffles hand of player3
    public void player4Shuffle()
    {
        Collections.shuffle(player4);
    }//shuffles hand of player4
    public void defuseAndShuffle(int size, ArrayList<String> EKC)
    {
        if (size == 2)
        {
            for (int u = 39; u < 39+(6-size); u++)
            {
                EKC.add(u, "Defuse");
            }//ends for loop that inserts 4 defuse to EKC deck
            Collections.shuffle(EKC);
        }// add 4 defuse to EKC deck to index 39 - 42 and shuffle EKC deck if # of players = 2
        if (size == 3)
        {
            for (int u = 36; u < 36+(6-size); u++)
            {
                EKC.add(u, "Defuse");
            }//ends for loop that inserts 3 defuse to EKC deck
            Collections.shuffle(EKC);
        }// add 3 defuse to EKC deck to index 36 - 38 and shuffle EKC deck if # of players = 3
        if (size == 4)
        {
            for (int u = 32; u < 32+(6-size); u++)
            {
                EKC.add(u, "Defuse");
            }//ends for loop that inserts 2 defuse to EKC deck
            Collections.shuffle(EKC);
        }// add 2 defuse to EKC deck to index 32 - 33 and shuffle EKC deck if # of players = 4
    }//ends defuseAndShuffle method
}//ends Players class



